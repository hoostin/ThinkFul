{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\week9\\\\qualafied\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\BreadCrumb.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, NavLink, Route, Switch, useParams, useRouteMatch } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\"; //import { listDecks} from \"./utils/api/index\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BreadCrumb({\n  decks\n}) {\n  _s();\n\n  const [deck, setDeck] = useState({});\n  const {\n    url,\n    params\n  } = useRouteMatch();\n  const [error, setError] = useState(undefined);\n  const subUrls = url.split(`/`);\n  let deckId;\n  console.log(params);\n\n  for (let param in params) {\n    if (param === 'deckId') {\n      deckId = params[param];\n    }\n\n    console.log(param, params[param], deckId);\n  }\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck).catch(setError);\n    return () => abortController.abort();\n  }, []); // dynamically assign breadcrumb\n\n  const list = subUrls.map((aSubUrl, index) => {\n    let className;\n\n    if (index >= subUrls.length - 1) {\n      className = \"breadcrumb-item active\";\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: className,\n        children: aSubUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 10\n      }, this);\n    } else {\n      className = \"breadcrumb-item\";\n    }\n\n    if (aSubUrl != \"decks\" && aSubUrl != \" \") return /*#__PURE__*/_jsxDEV(\"li\", {\n      className: className,\n      children: /*#__PURE__*/_jsxDEV(Link, {\n        to: `${aSubUrl}`,\n        children: aSubUrl\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    \"aria-label\": \"breadcrumb\",\n    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item active\",\n        \"aria-current\": \"page\",\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 5\n      }, this), list]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 3\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n} //   const [deckId, setDeckId] = useState(null);\n//   const [error, setError] = useState(undefined);\n//   const [test,setTest] = useState(true);\n//   const url = useRouteMatch().url;\n//   const subUrls = url.split(`/`);\n//   const path = useRouteMatch().path;\n//   const subPath = path.split(`/`);\n// //   useEffect(() => {\n// //     const abortController = new AbortController();\n// //     readDeck(deckId,abortController.signal).then(setDeck).catch(setError);\n// //     return () => abortController.abort();\n// // }, [])\n// // if(error){\n// //   //  return <ErrorMessage error={error} />;\n// //   console.log(\"very big bad\");\n// // }\n//   const list = subUrls.map((aSubUrl, index) => {\n//     let className;\n//     // console.log(index)\n//     // console.log(aSubUrl)\n//     // console.log(subPath[index])\n//    if(index >= (subUrls.length-1) ) {\n//     className = \"breadcrumb-item active\";\n//    } else{ className =\"breadcrumb-item\" ;}\n//     if(aSubUrl != path[index])\n//     {\n//       if(subPath[index] ==`:deckId`)\n//       {\n//         console.log(aSubUrl)\n//        // setDeckId(() => aSubUrl);\n//     }\n//     else if (aSubUrl != `decks`)\n//     {\n//       return <li className={className} >test</li>\n//     }\n//   }})\n// //   console.log(url)\n\n_s(BreadCrumb, \"lU0h2nNFQ9DjHp0lBv7xOL+TrdM=\", false, function () {\n  return [useRouteMatch];\n});\n\n_c = BreadCrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreadCrumb\");","map":{"version":3,"sources":["D:/Thinkful/week9/qualafied/Project_Flashcards_Qualified_1/src/Layout/BreadCrumb.jsx"],"names":["React","useEffect","useState","Link","NavLink","Route","Switch","useParams","useRouteMatch","readDeck","BreadCrumb","decks","deck","setDeck","url","params","error","setError","undefined","subUrls","split","deckId","console","log","param","abortController","AbortController","signal","then","catch","abort","list","map","aSubUrl","index","className","length"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SACEC,IADF,EAEEC,OAFF,EAGEC,KAHF,EAIEC,MAJF,EAKEC,SALF,EAMEC,aANF,QAOO,kBAPP;AAQA,SAASC,QAAT,QAAyB,cAAzB,C,CACA;;;AAEA,eAAe,SAASC,UAAT,CAAoB;AAACC,EAAAA;AAAD,CAApB,EAA4B;AAAA;;AACzC,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBX,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM;AAACY,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAgBP,aAAa,EAAnC;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAoBf,QAAQ,CAACgB,SAAD,CAAlC;AACA,QAAMC,OAAO,GAAGL,GAAG,CAACM,KAAJ,CAAW,GAAX,CAAhB;AACA,MAAIC,MAAJ;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;;AAEA,OAAI,IAAIS,KAAR,IAAiBT,MAAjB,EACA;AACE,QAAGS,KAAK,KAAK,QAAb,EACA;AACEH,MAAAA,MAAM,GAAGN,MAAM,CAACS,KAAD,CAAf;AACD;;AAEDF,IAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ,EAAoBT,MAAM,CAACS,KAAD,CAA1B,EAAmCH,MAAnC;AACD;;AACDpB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMwB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAjB,IAAAA,QAAQ,CAACY,MAAD,EAAQI,eAAe,CAACE,MAAxB,CAAR,CAAwCC,IAAxC,CAA6Cf,OAA7C,EAAsDgB,KAAtD,CAA4DZ,QAA5D;AAEA,WAAO,MAAMQ,eAAe,CAACK,KAAhB,EAAb;AACH,GALU,EAKR,EALQ,CAAT,CAjByC,CAwB3C;;AACA,QAAMC,IAAI,GAAGZ,OAAO,CAACa,GAAR,CAAY,CAACC,OAAD,EAAUC,KAAV,KAAoB;AAC3C,QAAIC,SAAJ;;AACD,QAAGD,KAAK,IAAKf,OAAO,CAACiB,MAAR,GAAe,CAA5B,EAAiC;AAChCD,MAAAA,SAAS,GAAG,wBAAZ;AACA,0BAAO;AAAI,QAAA,SAAS,EAAEA,SAAf;AAAA,kBAA4BF;AAA5B;AAAA;AAAA;AAAA;AAAA,cAAP;AACA,KAHD,MAGM;AAAEE,MAAAA,SAAS,GAAE,iBAAX;AAA+B;;AACvC,QAAGF,OAAO,IAAI,OAAX,IAAuBA,OAAO,IAAI,GAArC,EACA,oBAAO;AAAI,MAAA,SAAS,EAAEE,SAAf;AAAA,6BAA2B,QAAC,IAAD;AAAM,QAAA,EAAE,EAAG,GAAEF,OAAQ,EAArB;AAAA,kBAAyBA;AAAzB;AAAA;AAAA;AAAA;AAAA;AAA3B;AAAA;AAAA;AAAA;AAAA,YAAP;AACA,GARY,CAAb;AAUI,sBACI;AAAK,kBAAW,YAAhB;AAAA,2BACN;AAAI,MAAA,SAAS,EAAC,YAAd;AAAA,8BACE;AAAI,QAAA,SAAS,EAAC,wBAAd;AAAuC,wBAAa,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,EAEGF,IAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AADM;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,C,CAUD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;GAhGwBrB,U;UAEAF,a;;;KAFAE,U","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Link,\r\n  NavLink,\r\n  Route,\r\n  Switch,\r\n  useParams,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api\";\r\n//import { listDecks} from \"./utils/api/index\"\r\n\r\nexport default function BreadCrumb({decks}){\r\n  const [deck,setDeck] = useState({});\r\n  const {url, params} = useRouteMatch();\r\n  const [error, setError] = useState(undefined);\r\n  const subUrls = url.split(`/`);\r\n  let deckId;\r\n  console.log(params);\r\n\r\n  for(let param in params)\r\n  {\r\n    if(param === 'deckId')\r\n    {\r\n      deckId = params[param];\r\n    }\r\n  \r\n    console.log(param , params[param], deckId)\r\n  }\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId,abortController.signal).then(setDeck).catch(setError);\r\n\r\n    return () => abortController.abort();\r\n}, [])\r\n\r\n// dynamically assign breadcrumb\r\nconst list = subUrls.map((aSubUrl, index) => {\r\n  let className;\r\n if(index >= (subUrls.length-1) ) {\r\n  className = \"breadcrumb-item active\";\r\n  return <li className={className} >{aSubUrl}</li>\r\n } else{ className =\"breadcrumb-item\" ;}\r\n if(aSubUrl != \"decks\" &&  aSubUrl != \" \")\r\n return <li className={className} ><Link to={`${aSubUrl}`}>{aSubUrl}</Link></li>\r\n})\r\n\r\n    return (\r\n        <nav aria-label=\"breadcrumb\">\r\n  <ol className=\"breadcrumb\">\r\n    <li className=\"breadcrumb-item active\" aria-current=\"page\">Home</li>\r\n    {list}\r\n  </ol>\r\n</nav>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//   const [deckId, setDeckId] = useState(null);\r\n//   const [error, setError] = useState(undefined);\r\n//   const [test,setTest] = useState(true);\r\n//   const url = useRouteMatch().url;\r\n//   const subUrls = url.split(`/`);\r\n//   const path = useRouteMatch().path;\r\n//   const subPath = path.split(`/`);\r\n// //   useEffect(() => {\r\n// //     const abortController = new AbortController();\r\n// //     readDeck(deckId,abortController.signal).then(setDeck).catch(setError);\r\n\r\n// //     return () => abortController.abort();\r\n// // }, [])\r\n// // if(error){\r\n// //   //  return <ErrorMessage error={error} />;\r\n// //   console.log(\"very big bad\");\r\n// // }\r\n\r\n  \r\n  \r\n//   const list = subUrls.map((aSubUrl, index) => {\r\n//     let className;\r\n//     // console.log(index)\r\n//     // console.log(aSubUrl)\r\n//     // console.log(subPath[index])\r\n//    if(index >= (subUrls.length-1) ) {\r\n//     className = \"breadcrumb-item active\";\r\n//    } else{ className =\"breadcrumb-item\" ;}\r\n//     if(aSubUrl != path[index])\r\n//     {\r\n//       if(subPath[index] ==`:deckId`)\r\n//       {\r\n//         console.log(aSubUrl)\r\n//        // setDeckId(() => aSubUrl);\r\n//     }\r\n//     else if (aSubUrl != `decks`)\r\n//     {\r\n//       return <li className={className} >test</li>\r\n//     }\r\n\r\n//   }})\r\n// //   console.log(url)"]},"metadata":{},"sourceType":"module"}