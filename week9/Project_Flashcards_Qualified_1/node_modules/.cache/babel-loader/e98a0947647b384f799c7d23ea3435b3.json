{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\week9\\\\qualafied\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\Deck\\\\ViewDeck.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport CreateDeckButton from \"./CreateDeckButton\"; //import Header from \"../Header\";\n//import NotFound from \"../NotFound\";\n\nimport { Link, NavLink, Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport Deck from \"./Deck\";\nimport { listDecks } from \"../../utils/api/index\";\nimport BreadCrumb from \"../BreadCrumb\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ViewDeck({\n  decks\n}) {\n  _s();\n\n  const [deck, setDeck] = useState({});\n  const {\n    url,\n    params\n  } = useRouteMatch();\n  const [error, setError] = useState(undefined);\n  const subUrls = url.split(`/`);\n  let deckId;\n\n  for (let param in params) {\n    if (param === 'deckId') {\n      deckId = params[param];\n    }\n  }\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck).catch(setError);\n    return () => abortController.abort();\n  }, []);\n  console.log(deckId);\n  return /*#__PURE__*/_jsxDEV(BreadCrumb, {\n    decks: decks\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ViewDeck, \"lU0h2nNFQ9DjHp0lBv7xOL+TrdM=\", false, function () {\n  return [useRouteMatch];\n});\n\n_c = ViewDeck;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewDeck\");","map":{"version":3,"sources":["D:/Thinkful/week9/qualafied/Project_Flashcards_Qualified_1/src/Layout/Deck/ViewDeck.jsx"],"names":["React","useEffect","useState","CreateDeckButton","Link","NavLink","Route","Switch","useRouteMatch","Deck","listDecks","BreadCrumb","ViewDeck","decks","deck","setDeck","url","params","error","setError","undefined","subUrls","split","deckId","param","abortController","AbortController","readDeck","signal","then","catch","abort","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,gBAAP,MAA6B,oBAA7B,C,CACA;AACA;;AACA,SACEC,IADF,EAEEC,OAFF,EAGEC,KAHF,EAIEC,MAJF,EAKEC,aALF,QAMO,kBANP;AAOA,OAAOC,IAAP,MAAiB,QAAjB;AACA,SAASC,SAAT,QAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,eAAvB;;AAEA,eAAe,SAASC,QAAT,CAAkB;AAACC,EAAAA;AAAD,CAAlB,EACf;AAAA;;AACE,QAAM,CAACC,IAAD,EAAMC,OAAN,IAAiBb,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM;AAACc,IAAAA,GAAD;AAAMC,IAAAA;AAAN,MAAgBT,aAAa,EAAnC;AACA,QAAM,CAACU,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAACkB,SAAD,CAAlC;AACA,QAAMC,OAAO,GAAGL,GAAG,CAACM,KAAJ,CAAW,GAAX,CAAhB;AACA,MAAIC,MAAJ;;AACA,OAAI,IAAIC,KAAR,IAAiBP,MAAjB,EACA;AACE,QAAGO,KAAK,KAAK,QAAb,EACA;AACED,MAAAA,MAAM,GAAGN,MAAM,CAACO,KAAD,CAAf;AACD;AACF;;AACAvB,EAAAA,SAAS,CAAC,MAAM;AACjB,UAAMwB,eAAe,GAAG,IAAIC,eAAJ,EAAxB;AACAC,IAAAA,QAAQ,CAACJ,MAAD,EAAQE,eAAe,CAACG,MAAxB,CAAR,CAAwCC,IAAxC,CAA6Cd,OAA7C,EAAsDe,KAAtD,CAA4DX,QAA5D;AAEA,WAAO,MAAMM,eAAe,CAACM,KAAhB,EAAb;AACD,GALW,EAKT,EALS,CAAT;AAMHC,EAAAA,OAAO,CAACC,GAAR,CAAYV,MAAZ;AACI,sBAEA,QAAC,UAAD;AAAY,IAAA,KAAK,EAAEV;AAAnB;AAAA;AAAA;AAAA;AAAA,UAFA;AAMH;;GA3BuBD,Q;UAGAJ,a;;;KAHAI,Q","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport CreateDeckButton from \"./CreateDeckButton\";\r\n//import Header from \"../Header\";\r\n//import NotFound from \"../NotFound\";\r\nimport {\r\n  Link,\r\n  NavLink,\r\n  Route,\r\n  Switch,\r\n  useRouteMatch,\r\n} from \"react-router-dom\";\r\nimport Deck from \"./Deck\";\r\nimport { listDecks} from \"../../utils/api/index\"\r\nimport BreadCrumb from \"../BreadCrumb\";\r\n\r\nexport default function ViewDeck({decks})\r\n{  \r\n  const [deck,setDeck] = useState({});\r\n  const {url, params} = useRouteMatch();\r\n  const [error, setError] = useState(undefined);\r\n  const subUrls = url.split(`/`);\r\n  let deckId;\r\n  for(let param in params)\r\n  {\r\n    if(param === 'deckId')\r\n    {\r\n      deckId = params[param];\r\n    }\r\n  }\r\n   useEffect(() => {\r\n  const abortController = new AbortController();\r\n  readDeck(deckId,abortController.signal).then(setDeck).catch(setError);\r\n\r\n  return () => abortController.abort();\r\n}, [])\r\nconsole.log(deckId)\r\n    return(\r\n      \r\n    <BreadCrumb decks={decks}/>\r\n    \r\n    \r\n    )\r\n}"]},"metadata":{},"sourceType":"module"}