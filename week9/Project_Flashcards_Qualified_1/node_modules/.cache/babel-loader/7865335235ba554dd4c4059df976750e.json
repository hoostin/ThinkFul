{"ast":null,"code":"var _jsxFileName = \"D:\\\\Thinkful\\\\week9\\\\qualafied\\\\Project_Flashcards_Qualified_1\\\\src\\\\Layout\\\\BreadCrumb.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport { readDeck } from \"../utils/api\"; //import { listDecks} from \"./utils/api/index\"\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function BreadCrumb({\n  decks\n}) {\n  _s();\n\n  const [deck, setDeck] = useState({});\n  const {\n    url,\n    params,\n    path\n  } = useRouteMatch();\n  const [error, setError] = useState(undefined);\n  const subUrls = url.split(`/`); //console.log(useRouteMatch());\n  // console.log(path);\n\n  let deckId;\n\n  for (let param in params) {\n    if (param === \"deckId\") {\n      deckId = params[param];\n    }\n  }\n\n  if (error) {\n    console.log(error);\n  }\n\n  useEffect(() => {\n    const abortController = new AbortController();\n    readDeck(deckId, abortController.signal).then(setDeck).catch(setError);\n    return () => abortController.abort();\n  }, []);\n  const list = subUrls.map((aSubUrl, index) => {\n    //console.log(aSubUrl);\n    let className;\n\n    if (index >= subUrls.length - 1) {\n      className = \"breadcrumb-item active\";\n\n      if (aSubUrl == deckId && deckId != \"new\") {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: className,\n          children: deck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 16\n        }, this);\n      }\n\n      let value = \"  \";\n\n      switch (aSubUrl) {\n        case \"new\":\n          value = \"Create Deck\";\n          break;\n\n        case \"study\":\n          value = \"Study\";\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        className: className,\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 14\n      }, this);\n    } else {\n      className = \"breadcrumb-item\";\n    }\n\n    if (aSubUrl != \"decks\" && aSubUrl != \"\") {\n      if (aSubUrl == deckId) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: className,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `/5`,\n            children: deck.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this);\n      }\n    } else {\n      if (aSubUrl == \"\") {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          className: className,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            to: `${aSubUrl}`,\n            className: \"oi oi-home\",\n            children: \"Home\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this);\n      }\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    \"aria-label\": \"breadcrumb\",\n    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"breadcrumb\",\n      children: list\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n} //   const [deckId, setDeckId] = useState(null);\n//   const [error, setError] = useState(undefined);\n//   const [test,setTest] = useState(true);\n//   const url = useRouteMatch().url;\n//   const subUrls = url.split(`/`);\n//   const path = useRouteMatch().path;\n//   const subPath = path.split(`/`);\n// //   useEffect(() => {\n// //     const abortController = new AbortController();\n// //     readDeck(deckId,abortController.signal).then(setDeck).catch(setError);\n// //     return () => abortController.abort();\n// // }, [])\n// // if(error){\n// //   //  return <ErrorMessage error={error} />;\n// //   console.log(\"very big bad\");\n// // }\n//   const list = subUrls.map((aSubUrl, index) => {\n//     let className;\n//     // console.log(index)\n//     // console.log(aSubUrl)\n//     // console.log(subPath[index])\n//    if(index >= (subUrls.length-1) ) {\n//     className = \"breadcrumb-item active\";\n//    } else{ className =\"breadcrumb-item\" ;}\n//     if(aSubUrl != path[index])\n//     {\n//       if(subPath[index] ==`:deckId`)\n//       {\n//         console.log(aSubUrl)\n//        // setDeckId(() => aSubUrl);\n//     }\n//     else if (aSubUrl != `decks`)\n//     {\n//       return <li className={className} >test</li>\n//     }\n//   }})\n// //   console.log(url)\n\n_s(BreadCrumb, \"iudmDsT7lFKMq+8gHvtJuDnRLM4=\", false, function () {\n  return [useRouteMatch];\n});\n\n_c = BreadCrumb;\n\nvar _c;\n\n$RefreshReg$(_c, \"BreadCrumb\");","map":{"version":3,"sources":["D:/Thinkful/week9/qualafied/Project_Flashcards_Qualified_1/src/Layout/BreadCrumb.jsx"],"names":["React","useEffect","useState","Link","useRouteMatch","readDeck","BreadCrumb","decks","deck","setDeck","url","params","path","error","setError","undefined","subUrls","split","deckId","param","console","log","abortController","AbortController","signal","then","catch","abort","list","map","aSubUrl","index","className","length","name","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Link, useRouteMatch } from \"react-router-dom\";\r\nimport { readDeck } from \"../utils/api\";\r\n//import { listDecks} from \"./utils/api/index\"\r\n\r\nexport default function BreadCrumb({ decks }) {\r\n  const [deck, setDeck] = useState({});\r\n  const { url, params, path } = useRouteMatch();\r\n  const [error, setError] = useState(undefined);\r\n  const subUrls = url.split(`/`);\r\n  //console.log(useRouteMatch());\r\n  // console.log(path);\r\n  let deckId;\r\n  for (let param in params) {\r\n    if (param === \"deckId\") {\r\n      deckId = params[param];\r\n    }\r\n  }\r\n\r\n  if (error) {\r\n    console.log(error);\r\n  }\r\n  useEffect(() => {\r\n    const abortController = new AbortController();\r\n    readDeck(deckId, abortController.signal).then(setDeck).catch(setError);\r\n    return () => abortController.abort();\r\n  }, []);\r\n  const list = subUrls.map((aSubUrl, index) => {\r\n    //console.log(aSubUrl);\r\n    let className;\r\n    if (index >= subUrls.length - 1) {\r\n      className = \"breadcrumb-item active\";\r\n      if (aSubUrl == deckId && deckId != \"new\") {\r\n        return <li className={className}>{deck.name}</li>;\r\n      }\r\n      let value = \"  \";\r\n      switch (aSubUrl) {\r\n        case \"new\":\r\n          value = \"Create Deck\";\r\n          break;\r\n        case \"study\":\r\n          value = \"Study\";\r\n      }\r\n      return <li className={className}>{value}</li>;\r\n    } else {\r\n      className = \"breadcrumb-item\";\r\n    }\r\n    if (aSubUrl != \"decks\" && aSubUrl != \"\") {\r\n      if (aSubUrl == deckId) {\r\n        return (\r\n          <li className={className}>\r\n            <Link to={`/5`}>{deck.name}</Link>\r\n          </li>\r\n        );\r\n      }\r\n    } else {\r\n      if (aSubUrl == \"\") {\r\n        return (\r\n          <li className={className}>\r\n            <Link to={`${aSubUrl}`} className=\"oi oi-home\">\r\n              Home\r\n            </Link>\r\n          </li>\r\n        );\r\n      }\r\n    }\r\n  });\r\n  return (\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol className=\"breadcrumb\">{list}</ol>\r\n    </nav>\r\n  );\r\n}\r\n\r\n//   const [deckId, setDeckId] = useState(null);\r\n//   const [error, setError] = useState(undefined);\r\n//   const [test,setTest] = useState(true);\r\n//   const url = useRouteMatch().url;\r\n//   const subUrls = url.split(`/`);\r\n//   const path = useRouteMatch().path;\r\n//   const subPath = path.split(`/`);\r\n// //   useEffect(() => {\r\n// //     const abortController = new AbortController();\r\n// //     readDeck(deckId,abortController.signal).then(setDeck).catch(setError);\r\n\r\n// //     return () => abortController.abort();\r\n// // }, [])\r\n// // if(error){\r\n// //   //  return <ErrorMessage error={error} />;\r\n// //   console.log(\"very big bad\");\r\n// // }\r\n\r\n//   const list = subUrls.map((aSubUrl, index) => {\r\n//     let className;\r\n//     // console.log(index)\r\n//     // console.log(aSubUrl)\r\n//     // console.log(subPath[index])\r\n//    if(index >= (subUrls.length-1) ) {\r\n//     className = \"breadcrumb-item active\";\r\n//    } else{ className =\"breadcrumb-item\" ;}\r\n//     if(aSubUrl != path[index])\r\n//     {\r\n//       if(subPath[index] ==`:deckId`)\r\n//       {\r\n//         console.log(aSubUrl)\r\n//        // setDeckId(() => aSubUrl);\r\n//     }\r\n//     else if (aSubUrl != `decks`)\r\n//     {\r\n//       return <li className={className} >test</li>\r\n//     }\r\n\r\n//   }})\r\n// //   console.log(url)\r\n"]},"metadata":{},"sourceType":"module"}